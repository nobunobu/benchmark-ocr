#!/bin/bash

# ==============================================================================
# Script para processar PDFs em subdiret√≥rios (Compat√≠vel com ImageMagick v7+):
# - Para cada subdiret√≥rio:
#   - Concatena todas as p√°ginas de todos os PDFs encontrados nele em uma √∫nica imagem JPG.
#   - Nomeia o JPG com o nome do subdiret√≥rio.
#   - Faz o upload do JPG para AWS S3, mantendo a estrutura de prefixo.
# - Melhorado para lidar com nomes de arquivos contendo espa√ßos e garantir
#   que a l√≥gica de contagem e sucesso funcione corretamente.
# - Gera lista de downloads no final do processamento.
# ==============================================================================

# --- Configura√ß√µes ---
BASE_DIR="./data/senhas"          # Pasta base que cont√©m os subdiret√≥rios com PDFs
OUTPUT_QUALITY="90"               # Qualidade do JPG (0-100)
IMAGE_DENSITY="300"               # Resolu√ß√£o (DPI) para rasterizar PDFs (ex: 150, 300)

AWS_S3_BUCKET="superdoc-app" # Nome do seu bucket S3 (EX: meus-documentos-processados)
AWS_S3_BASE_PREFIX="clients/" # Prefixo base dentro do bucket S3 para uploads
# ATEN√á√ÉO: As credenciais da AWS devem ser configuradas via `aws configure` ou vari√°veis de ambiente.

# Array para armazenar os URLs dos arquivos enviados
declare -a UPLOADED_FILES_URLS=()
declare -a UPLOADED_FILES_NAMES=()

# --- Verifica√ß√µes de Pr√©-requisitos ---
echo "========================================"
echo "Verificando pr√©-requisitos..."

command -v magick >/dev/null 2>&1 || { echo >&2 "Erro: ImageMagick (magick) n√£o est√° instalado. Abortando."; exit 1; }
command -v gs >/dev/null 2>&1 || { echo >&2 "Erro: Ghostscript (gs) n√£o est√° instalado. √â necess√°rio para ImageMagick processar PDFs. Abortando."; exit 1; }
command -v aws >/dev/null 2>&1 || { echo >&2 "Erro: AWS CLI n√£o est√° instalado ou configurado. Abortando."; exit 1; }

if [ ! -d "$BASE_DIR" ]; then
    echo "Erro: A pasta base '$BASE_DIR' n√£o existe. Por favor, crie-a ou ajuste a vari√°vel BASE_DIR."
    exit 1
fi

echo "Pr√©-requisitos verificados com sucesso."
echo "========================================"

# --- Processar cada subdiret√≥rio ---
# Encontra todos os subdiret√≥rios diretamente abaixo de BASE_DIR
SUBDIRS=$(find "$BASE_DIR" -maxdepth 1 -type d -not -path "$BASE_DIR" | sort)

if [ -z "$SUBDIRS" ]; then
    echo "Nenhum subdiret√≥rio encontrado em '$BASE_DIR'. Nada para processar."
    exit 0
fi

echo "Subdiret√≥rios a serem processados:"
echo "$SUBDIRS" | sed 's|^|  - |'
echo "========================================"

for SUBDIR_PATH in $SUBDIRS; do
    SUBDIR_NAME=$(basename "$SUBDIR_PATH") # Obt√©m apenas o nome do subdiret√≥rio
    OUTPUT_JPG_FILENAME="${SUBDIR_NAME}.jpg" # Nome do arquivo JPG de sa√≠da
    FULL_OUTPUT_JPG_PATH="${SUBDIR_PATH}/${OUTPUT_JPG_FILENAME}" # Caminho completo para o JPG

    echo ""
    echo "--- Processando subdiret√≥rio: $SUBDIR_NAME ---"

    # Encontrar todos os PDFs neste subdiret√≥rio (case-insensitive para .pdf/.PDF)
    # e armazen√°-los em um array para iterar de forma segura.
    # Usamos `readarray` (ou `mapfile` para Bash 4+) para carregar a sa√≠da do find para um array.
    PDF_FILES_ARRAY=()
    while IFS= read -r line; do
        PDF_FILES_ARRAY+=("$line")
    done < <(find "$SUBDIR_PATH" -maxdepth 1 -type f -iname "*.pdf" | sort)

    if [ ${#PDF_FILES_ARRAY[@]} -eq 0 ]; then
        echo "Nenhum arquivo PDF encontrado em '$SUBDIR_PATH'. Pulando este subdiret√≥rio."
        continue # Pula para o pr√≥ximo subdiret√≥rio
    fi

    echo "PDFs encontrados em '$SUBDIR_NAME':"
    for pdf_file_info in "${PDF_FILES_ARRAY[@]}"; do
        echo "  - $pdf_file_info"
    done

    # Criar um diret√≥rio tempor√°rio para as p√°ginas extra√≠das
    TEMP_PAGES_DIR=$(mktemp -d -t pdf_pages_XXXXXX)
    if [ $? -ne 0 ]; then
        echo "Erro ao criar diret√≥rio tempor√°rio para $SUBDIR_NAME. Pulando."
        continue
    fi
    echo "Diret√≥rio tempor√°rio para p√°ginas: $TEMP_PAGES_DIR"

    PAGE_COUNTER=0 # Contador global de p√°ginas para garantir nomes √∫nicos e ordem
    CONVERSION_SUCCESS=true

    # Converter cada PDF do subdiret√≥rio em imagens tempor√°rias
    for PDF_FILE in "${PDF_FILES_ARRAY[@]}"; do
        echo "  - Convertendo PDF: $PDF_FILE"
        
        magick -density "$IMAGE_DENSITY" "$PDF_FILE" \
                -quality "$OUTPUT_QUALITY" \
                -alpha remove \
                "$TEMP_PAGES_DIR/page_$(printf "%04d" $PAGE_COUNTER)_%02d.jpg"

        if [ $? -ne 0 ]; then
            echo "    Erro ao converter $PDF_FILE. Este subdiret√≥rio ser√° ignorado."
            CONVERSION_SUCCESS=false
            break # Sai do loop de PDFs
        fi
        # Atualiza o contador de p√°ginas para o pr√≥ximo PDF
        PAGE_COUNTER=$((PAGE_COUNTER + $(ls "$TEMP_PAGES_DIR"/page_$(printf "%04d" $PAGE_COUNTER)_*.jpg 2>/dev/null | wc -l)))
    done

    # Se a convers√£o de algum PDF falhou
    if [ "$CONVERSION_SUCCESS" = false ]; then
        rm -rf "$TEMP_PAGES_DIR" # Limpa o diret√≥rio temp antes de pular
        continue # Pula para o pr√≥ximo subdiret√≥rio principal
    fi

    # Concatenar todas as imagens JPG tempor√°rias em uma √∫nica imagem JPG verticalmente
    echo "  - Concatenando todas as p√°ginas em '$FULL_OUTPUT_JPG_PATH'..."
    
    # Verifica se existem p√°ginas tempor√°rias para concatenar
    if [ -z "$(ls -A "$TEMP_PAGES_DIR"/page_*.jpg 2>/dev/null)" ]; then
        echo "    Nenhuma p√°gina JPG tempor√°ria encontrada para concatenar em '$SUBDIR_NAME'. Poss√≠vel erro anterior."
        rm -rf "$TEMP_PAGES_DIR"
        continue
    fi

    magick "$TEMP_PAGES_DIR"/page_*.jpg -append -quality "$OUTPUT_QUALITY" "$FULL_OUTPUT_JPG_PATH"

    if [ $? -ne 0 ]; then
        echo "    Erro ao concatenar imagens para '$SUBDIR_NAME'. Este subdiret√≥rio ser√° ignorado."
        rm -rf "$TEMP_PAGES_DIR"
        continue # Pula para o pr√≥ximo subdiret√≥rio principal
    fi

    echo "  - Arquivo JPG concatenado criado com sucesso: $FULL_OUTPUT_JPG_PATH"

    # --- Upload para AWS S3 ---
    echo "  - Iniciando upload de '$OUTPUT_JPG_FILENAME' para o S3..."
    AWS_S3_DESTINATION="s3://${AWS_S3_BUCKET}/${AWS_S3_BASE_PREFIX}${SUBDIR_NAME}/${OUTPUT_JPG_FILENAME}"

    aws s3 cp "$FULL_OUTPUT_JPG_PATH" "$AWS_S3_DESTINATION"

    if [ $? -ne 0 ]; then
        echo "    Erro no upload para o S3 de '$SUBDIR_NAME'. Verifique suas credenciais e permiss√µes."
        # N√£o aborta o script inteiro, apenas este subdiret√≥rio
    else
        echo "    Upload conclu√≠do com sucesso para: $AWS_S3_DESTINATION"
        
        # Armazenar informa√ß√µes do arquivo enviado para a lista de downloads
        S3_HTTP_URL="https://${AWS_S3_BUCKET}.s3.amazonaws.com/${AWS_S3_BASE_PREFIX}${SUBDIR_NAME}/${OUTPUT_JPG_FILENAME}"
        UPLOADED_FILES_URLS+=("$S3_HTTP_URL")
        UPLOADED_FILES_NAMES+=("$SUBDIR_NAME")
    fi

    # --- Limpeza ---
    rm -rf "$TEMP_PAGES_DIR"
    echo "--- Processamento de '$SUBDIR_NAME' conclu√≠do. ---"

done

echo ""
echo "========================================"
echo "Script finalizado: Todos os subdiret√≥rios foram processados."
echo "========================================"

# --- Lista de Downloads ---
if [ ${#UPLOADED_FILES_URLS[@]} -gt 0 ]; then
    echo ""
    echo "üìÅ LISTA DE ARQUIVOS DISPON√çVEIS PARA DOWNLOAD:"
    echo "========================================"
    
    for i in "${!UPLOADED_FILES_URLS[@]}"; do
        SUBDIR_NAME="${UPLOADED_FILES_NAMES[$i]}"
        FILE_URL="${UPLOADED_FILES_URLS[$i]}"
        
        echo "üìÑ ${SUBDIR_NAME}.jpg"
        echo "   üîó URL Direta: ${FILE_URL}"
        
        # Gerar URL assinada para download (v√°lida por 1 hora)
        echo -n "   üîê URL Assinada (2h): "
        PRESIGNED_URL=$(aws s3 presign "${FILE_URL/https:\/\/${AWS_S3_BUCKET}.s3.amazonaws.com\//s3://${AWS_S3_BUCKET}/}" --expires-in 7200 2>/dev/null)
        if [ $? -eq 0 ] && [ -n "$PRESIGNED_URL" ]; then
            echo "$PRESIGNED_URL"
        else
            echo "Erro ao gerar URL assinada"
        fi
        echo ""
    done
    
    echo "========================================"
    echo "üìä Total de arquivos processados: ${#UPLOADED_FILES_URLS[@]}"
    echo ""
    echo "üí° INSTRU√á√ïES:"
    echo "   ‚Ä¢ URLs Diretas: Use se o bucket S3 for p√∫blico"
    echo "   ‚Ä¢ URLs Assinadas: Use para buckets privados (v√°lidas por 1 hora)"
    echo "   ‚Ä¢ Para novas URLs assinadas, execute:"
    echo "     aws s3 presign s3://${AWS_S3_BUCKET}/${AWS_S3_BASE_PREFIX}<subdir>/<arquivo>.jpg --expires-in 3600"
    echo "========================================"
else
    echo ""
    echo "‚ö†Ô∏è  Nenhum arquivo foi enviado com sucesso para o S3."
    echo "   Verifique os logs acima para identificar poss√≠veis problemas."
fi